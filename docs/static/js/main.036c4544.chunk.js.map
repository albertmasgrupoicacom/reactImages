{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","hits","gifs","slice","map","img","id","title","tags","webformatURL","GifGridItem","className","src","alt","GifGrid","data","loading","state","setstate","useEffect","then","imgs","useFetchGifs","images","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,uBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,UACZR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,KAId,UACI,8CACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvB,IAAMM,EAAQN,EAAEQ,OAAOF,MACvBR,EAAcQ,U,+BCRTG,EAAO,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,qCACuBC,UAAUH,GADjC,4FAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAIDC,EAAOD,EAAKE,MAAM,EAAE,IAAIC,KAAK,SAAAC,GAC/B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIG,KACXZ,IAAKS,EAAII,iBAXG,kBAebP,GAfa,4CAAJ,sDCEPQ,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMX,EAAS,EAATA,IAC/B,OACI,sBAAKe,UAAU,yCAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAGrB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BmC,KAAO,GACPC,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAM,SAAAC,GACHH,EAAU,CACNH,KAAMM,EACNL,SAAS,SAGvB,CAACtB,IAEIuB,EDZyBK,CAAc5B,GAAjC6B,EAAb,EAAOR,KAAcC,EAArB,EAAqBA,QASrB,OACI,qCACA,oBAAIL,UAAU,oCAAd,SAAmDjB,IAClDsB,GAAW,mBAAGL,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEQY,EAAOnB,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEEpBkB,EAvBc,WAEzB,IACA,EAAmC5C,mBADd,CAAC,eACtB,mBAAO6C,EAAP,KAAkB9C,EAAlB,KAEA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ8C,EAAWrB,KAAK,SAACV,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADNA,YCb7BgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.036c4544.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) =>{\n        const value = e.target.value;\n        setInputValue(value);\n    };\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        console.log('submit')\n        setCategories(cats=>[inputValue,...cats,]);\n        setInputValue('')\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h5>Add Category</h5>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                >\n\n            </input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs  = async (category) => {\n    const url = `https://pixabay.com/api/?q=${ encodeURI(category)}&orientation=horizontal&image_type=photo&key=21285167-5f8b0f52eea43802cc54a6737`;\n    const resp = await fetch(url);\n    const {hits} = await resp.json();\n\n   \n\n    const gifs = hits.slice(0,19).map( img => {\n        return {\n            id: img.id,\n            title: img.tags,\n            url: img.webformatURL\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setimages] = useState([])\n    const {data: images ,loading} = useFetchGifs( category );\n\n    // useEffect( () => {\n    //     getGifs(category)\n    //         .then( imgs => setimages(imgs))\n    //         // .then(setimages)\n    // },[ category ])\n\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        {/* { loading ? 'Carregant...':'Ok.Carregat'} */}\n        <div className=\"card-grid\">\n            {\n                images.map( (img) => (\n                    <GifGridItem \n                        key = {img.id}\n                        {...img} />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data : [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n            .then( imgs => {\n                setstate( {\n                    data: imgs,\n                    loading: false\n                });\n            })\n    },[category])\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp  = () =>{\n\n    const initialState = ['Sant Jordi']\n    const [categories,setCategories] = useState(initialState);\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories} />\n        <hr />\n        <ol>\n            {\n                categories.map( (category) => \n                    <GifGrid \n                        key={category}\n                        category= {category} />\n                )\n            }\n        </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}